[
  {
    "id": 1,
    "image": [
      "/images/screenCard.png",
      "/images/screenCard1.png",
      "/images/screenCard2.png"
    ],
    "title": "Estatein",
    "slug": "/estatein",
    "category": "Fullstack Application",
    "stack": "Next.js (TypeScript), Zustand, Nestjs, PostgreSQL",
    "details": "Estatein is a modern real estate platform designed to showcase properties in an elegant and interactive way. The platform enables users to browse through listings with smooth filtering options, ensuring they find properties that match their preferences. The frontend prioritizes performance optimizations, sleek UI animations, and a seamless user experience. The current focus is on making the frontend provide an intuitive and engaging interface for potential buyers.",
    "purpose": "The goal of Estatein is to revolutionize the real estate experience by offering a centralized platform where users can browse, list, and manage properties with ease. Whether you're a homebuyer searching for the perfect place or an agent handling multiple listings, Estatein ensures smooth transactions, clear communication, and efficient property managementâ€”all in one place.",
    "webstack": "Next.js (App Router) was chosen for its seamless routing and server-side rendering capabilities, ensuring optimal performance for real estate listings. NestJS powers the backend, providing a structured and scalable API for handling property data and user interactions. PostgreSQL was selected for its relational database structure, allowing efficient management of property details, user preferences, and transactional records.",
    "lessons": "Working on Estatein has deepened my understanding of frontend performance optimizations, especially when handling dynamic property listings and interactive filtering. I explored ways to enhance UX through animations and responsiveness while keeping the UI smooth. Since I haven't integrated backend functionalities yet, I realized the importance of efficient state management and am considering Zustand for handling global state. This project has also pushed me to think critically about structuring frontend logic in a scalable way, making future backend integration smoother.",
    "link": [
      {
        "title": "GitHub",
        "link": "https://github.com/oluwatimilehinawoniyi/estatein"
      },
      {
        "title": "Live Site",
        "link": "https://estatein.oluwatimilehinawoniyi.com/"
      }
    ]
  },
  {
    "id": 2,
    "image": [
      "/images/hermes.png",
      "/images/Hermes.png",
      "/images/Hermes1.png"
    ],
    "title": "Hermes Logistics",
    "slug": "/hermes-logistics",
    "category": "Fullstack Application",
    "stack": "Next.js (TypeScript), Supabase, PostgreSQL",
    "details": "An efficient platform designed to streamline logistics management. It also handles taking in orders, setting delivery routes and tracking. The platform offers a complete suite of logistics services including storage and tracking of parcels.",
    "purpose": "The goal of Hermes Logistics is to create a seamless and efficient system for managing all aspects of logistics operations. This includes storage, handling, transportation, and expedited deliveries. By simplifying these processes, it ensures that deliveries are completed on time, and customers can track their shipments easily.",
    "webstack": "I chose Next.js App Router for its ease of routing and Supabase for its out-of-the-box authentication and authorization features.\n\nAdditionally, I opted for PostgreSQL due to the complex data relationships needed for the application. PostgreSQL's relational database structure was perfect for handling multiple relationships, making it an ideal fit for this project compared to other Backend-as-a-Service platforms.",
    "lessons": "One of the key things I learned during this project was implementing role-based authorization. Although I had come across this concept before, this was my first opportunity to apply it. I also faced some challenges setting up the database and authentication systems.\n\nHowever, after researching how to manage SQL relationships, most of my issues were resolved. This project greatly improved my understanding of relational databases and role-based access control.",
    "link": [
      {
        "title": "GitHub",
        "link": "https://github.com/oluwatimilehinawoniyi/hermes"
      },
      {
        "title": "Live Site",
        "link": "https://hermeslogistics.vercel.app/"
      }
    ]
  },
  {
    "id": 3,
    "image": [
      "/images/estatein-dashboard1.png",
      "/images/estatein-dashboard2.png",
      "/images/estatein-dashboard3.png",
      "/images/estatein-dashboard4a.png"
    ],
    "title": "Estatein CMS",
    "slug": "/estatein-cms",
    "category": "Admin Dashboard",
    "stack": "Next.js (TypeScript), Zod, Java/Springboot, PostgreSQL",
    "details": "Estatein CMS is a powerful dashboard built to streamline property management for the Estatein platform. The admin panel allows authorized users to perform CRUD operations on property listings, manage featured properties, and oversee platform analytics. The dashboard is optimized for responsiveness, ensuring a seamless experience across devices. Zod is used for robust form validation, preventing incorrect data input, while React hooks efficiently handles global state management.",
    "purpose": "The Estatein CMS was developed to give administrators full control over property listings and platform data. It simplifies property management by allowing admins to create, update, and delete listings in real-time. Additionally, the built-in analytics components provide insights into property trends, user interactions, and overall platform performance. With authentication mechanisms in place, only authorized users can access and modify data, ensuring security and reliability.",
    "webstack": "Next.js (App Router) was chosen for its efficiency in handling admin panel routing and server-side rendering for improved performance. React Hooks was implemented for state management, ensuring smooth updates across the dashboard without unnecessary re-renders. Form validation is handled by Zod, enforcing data integrity when creating or editing listings. Springboot (Java) powers the backend API, providing a structured and secure way to interact with PostgreSQL, which serves as the relational database for managing property records and admin operations.",
    "lessons": "Building the Estatein CMS deepened my understanding of admin dashboard structures, especially in handling role-based authentication and real-time property updates. Implementing React Hooks for state management provided insight into optimizing performance within interactive admin panels. Working with Zod enhanced my approach to form validation, ensuring data consistency across the platform. This project also highlighted the importance of UI responsiveness and accessibility in admin tools, ensuring a smooth experience for users managing the platform.",
    "link": [
      {
        "title": "GitHub",
        "link": "https://github.com/oluwatimilehinawoniyi/estatein-cms"
      },
      {
        "title": "Live Site",
        "link": "https://admin.estatein.oluwatimilehinawoniyi.com/"
      }
    ]
  },
  {
    "id": 4,
    "image": ["/images/CSS_Unit.gif", "/images/CSS_UNIT.jpg"],
    "title": "CSS Unit Converter",
    "slug": "/CSS-unit-converter",
    "category": "VS Code Extension",
    "stack": "TypeScript",
    "details": "A VS Code extension that converts CSS unit values directly and displays them in hover cards or as comments beside the code. It supports units like px, em, and rem, making CSS development faster and more intuitive.",
    "purpose": "CSS Unit Converter is a VS Code extension designed to simplify CSS development by providing quick and easy unit conversions directly within your code editor. Whether you're dealing with px, em, or rem, this extension ensures that you can convert and visualize units effortlessly. \n\nThe motivation behind building this extension came from my struggle with understanding and converting certain units in CSS. For example, while I knew that 1rem equals 16px and could easily convert simple values like 2rem, more complex values like 2.35rem or 0.5em were a challenge. This led me to create a helper tool for unit conversions, and after hearing from another developer facing similar issues, I knew this would be a useful extension for many.",
    "webstack": "This project was built using TypeScript to ensure type safety and a smoother development experience, especially when working with the VS Code API. I utilized the VS Code Extension API to create the hover cards and integrate directly into the editor.",
    "lessons": "Building this extension involved diving deep into VS Code's documentation and learning about its API. It was also an opportunity to practice TypeScript in a new context. \n\nOne of the biggest challenges was figuring out how to implement real-time hover card functionality, but with plenty of research and problem-solving, I was able to achieve it. In the future, I'd like to expand the extension's functionality to support even more units and additional CSS tools.",
    "link": [
      {
        "title": "github",
        "link": "https://github.com/oluwatimilehinawoniyi/css-unit-converter"
      },
      {
        "title": "live site",
        "link": "https://marketplace.visualstudio.com/items?itemName=OluwatimilehinAwoniyi.css-unit-converter"
      }
    ]
  }
]
